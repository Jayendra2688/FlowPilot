"""
Django settings for flowpilot project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY','unsafe_secret')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'workflows',
    'rest_framework',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'flowpilot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'flowpilot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Redis Configuration (for future Celery setup)
REDIS_HOST = os.getenv('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')
REDIS_DB = os.getenv('REDIS_DB_INDEX', '1')

# Database Configuration - Now using PostgreSQL with Python 3.12!
if os.getenv('ENV') == 'prod':
    # Production PostgreSQL configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'OPTIONS': {
                'connect_timeout': 10,
                'options': '-c default_transaction_isolation=serializable'
            }
        }
    }
else:
    # Development: Use PostgreSQL if available, fallback to SQLite
    try:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('DB_NAME', 'flowpilot_db'),
                'USER': os.getenv('DB_USER', 'flowpilot_user'),
                'PASSWORD': os.getenv('DB_PASSWORD', 'flowpilot_password'),
                'HOST': os.getenv('DB_HOST', 'localhost'),
                'PORT': os.getenv('DB_PORT', '5432'),
                'OPTIONS': {
                    'connect_timeout': 10,
                }
            }
        }
    except Exception:
        # Fallback to SQLite if PostgreSQL setup fails
        print("Warning: PostgreSQL not available, using SQLite")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===========================
# CELERY CONFIGURATION
# ===========================

# Celery broker URL - Redis database 1 (separate from your other projects)
CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'

# Celery result backend - same as broker for simplicity
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'

# Celery task serialization
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Celery timezone
CELERY_TIMEZONE = TIME_ZONE

# Celery task routing and execution settings
CELERY_TASK_ROUTES = {
    'workflows.tasks.*': {'queue': 'workflows'},  # Route workflow tasks to dedicated queue
}

# Worker configuration
CELERY_WORKER_CONCURRENCY = 4  # Number of parallel tasks per worker
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # Only take one task at a time (good for long-running tasks)

# Task execution settings
CELERY_TASK_TIME_LIMIT = 300  # 5 minutes max per task (safety)
CELERY_TASK_SOFT_TIME_LIMIT = 240  # 4 minutes soft limit (graceful shutdown)

# Task result settings
CELERY_RESULT_EXPIRES = 3600  # Results expire after 1 hour

# Monitoring and debugging
CELERY_SEND_TASK_EVENTS = True  # Enable task events for monitoring
CELERY_WORKER_SEND_TASK_EVENTS = True

# Error handling
CELERY_TASK_REJECT_ON_WORKER_LOST = True  # Requeue tasks if worker crashes

# Development settings
if DEBUG:
    # In development, execute tasks synchronously for easier debugging
    # Set CELERY_TASK_ALWAYS_EAGER = True to disable async execution
    CELERY_TASK_ALWAYS_EAGER = False  # Set to True for synchronous execution
    CELERY_TASK_EAGER_PROPAGATES = True  # Propagate exceptions in eager mode
